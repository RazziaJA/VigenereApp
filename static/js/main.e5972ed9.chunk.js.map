{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getPlaceInAlphabet","c","toLowerCase","charCodeAt","getVigenereCharacterAt","index","plaintext","key","plaintextIndex","keyLength","keyIndex","length","test","newPlaceInAlpha","cipherLower","String","fromCharCode","toUpperCase","vigenere","cipher","i","App","useState","setPlainText","setKey","className","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAiCA,SAASA,EAAmBC,GAC1B,OAAOA,EAAEC,cAAcC,WAAW,GAAK,IAAIA,WAAW,GAYxD,SAASC,EAAuBC,EAAOC,EAAWC,GAChD,IArCmBC,EAAgBC,EAanBR,EAwBZS,GArCeF,EAqCQH,GArCQI,EAqCDF,EAAII,SApCrB,GACP,EAEHH,EAAiBC,GAkCxB,IAAkB,IAAdC,EACF,MAAO,GAET,GA5BgBT,EA4BFK,EAAUD,IA3BjB,WAAWO,KAAKX,GA4BrB,OAAOK,EAAUD,GAGnB,IAAIQ,GAAmBb,EAAmBM,EAAUD,IAAUL,EAAmBO,EAAIG,KAAc,GAC/FI,EAAcC,OAAOC,aAAa,IAAIb,WAAW,GAAKU,GAC1D,OAAOP,EAAUD,KAAWC,EAAUD,GAAOY,cAAgBH,EAAYG,cAAgBH,EAUpF,SAASI,EAASZ,EAAWC,GAElC,IADA,IAAIY,EAAS,GACJC,EAAI,EAAGA,EAAId,EAAUK,SAAUS,EACtCD,GAAUf,EAAuBgB,EAAGd,EAAWC,GAEjD,OAAOY,EA6BME,MArBf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOhB,EAAP,KAAkBiB,EAAlB,KACA,EAAsBD,mBAAS,IAA/B,mBAAOf,EAAP,KAAYiB,EAAZ,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,+CAEE,uBAAOC,MAAOpB,EAAWqB,SAAU,SAAAC,GAAC,OAAIL,EAAaK,EAAEC,OAAOH,aAEhE,uBACA,yCAEE,uBAAOA,MAAOnB,EAAKoB,SAAU,SAAAC,GAAC,OAAIJ,EAAOI,EAAEC,OAAOH,aAEpD,uBACA,iDAAoBR,EAASZ,EAAWC,UCpF/BuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e5972ed9.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n\n/**\n * Gets the index of the character in the key to use to shift the plaintext character at the given plaintextIndex. Returns -1 if the key is empty.\n * \n * @param plaintextIndex The index of the character in the plaintext being processed.\n * @param keyLength The length of the key.\n * @returns The index of the character to use in the key if the key is non-empty, -1 otherwise.\n */\nfunction getKeyIndex(plaintextIndex, keyLength) {\n  if (keyLength <= 0) {\n    return -1;\n  }\n  return plaintextIndex % keyLength;\n}\n\n/**\n * Checks if the given character is an uppercase or lowercase letter in the English alphabet (A-Z).\n * \n * @param c The character to check.\n * @returns True if the character is a letter, false otherwise.\n */\nfunction isLetter(c) {\n  return /[a-zA-Z]/.test(c);\n}\n\n/**\n * Calculates the given character's place in the alphabet, starting from 'A' = 0. Assumes the character is a letter.\n * \n * @param c The character to index.\n * @returns The character's place in the alphabet.\n */\nfunction getPlaceInAlphabet(c) {\n  return c.toLowerCase().charCodeAt(0) - \"a\".charCodeAt(0);\n}\n\n\n/**\n * Applies a Vigenere cipher to the character in the given plaintext at the given index, using the given key.\n * \n * @param index The index of the character to shift.\n * @param plaintext The plaintext.\n * @param key The key.\n * @returns The shifted character.\n */\nfunction getVigenereCharacterAt(index, plaintext, key) {\n  var keyIndex = getKeyIndex(index, key.length);\n  if (keyIndex === -1) {\n    return '';\n  }\n  if (!isLetter(plaintext[index])) {\n    return plaintext[index];\n  }\n\n  var newPlaceInAlpha = (getPlaceInAlphabet(plaintext[index]) + getPlaceInAlphabet(key[keyIndex])) % 26;\n  var cipherLower = String.fromCharCode(\"a\".charCodeAt(0) + newPlaceInAlpha);\n  return plaintext[index] === plaintext[index].toUpperCase() ? cipherLower.toUpperCase() : cipherLower;\n}\n\n/**\n * Applies a Vigenere cipher to the given plaintext using the given key.\n * \n * @param plaintext The plaintext.\n * @param key The key.\n * @returns The ciphertext.\n */\nexport function vigenere(plaintext, key) {\n  var cipher = \"\";\n  for (var i = 0; i < plaintext.length; ++i) {\n    cipher += getVigenereCharacterAt(i, plaintext, key);\n  }\n  return cipher;\n}\n\n/**\n * Creates a React component with two inputs (for plaintext and key) and a label (for ciphertext).\n * \n * @returns The React component.\n */\nfunction App() {\n  const [plaintext, setPlainText] = useState(\"\");\n  const [key, setKey] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <label>\n        Plaintext: \n        <input value={plaintext} onChange={e => setPlainText(e.target.value) }/>\n      </label>\n      <br/>\n      <label>\n        Key:\n        <input value={key} onChange={e => setKey(e.target.value) } />\n      </label>\n      <br/>\n      <label>Ciphertext: {vigenere(plaintext, key)}</label>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}